DEG[DEG==-Inf] <- NA
DEG <- DEG[rowSums(is.na(DEG))<ncol(DEG)/2,]
#create linear fit
#design  <- model.matrix(~0+factor(rep(c(1,2,3),5)))
design  <- model.matrix(~0+groups)
colnames(design) <- c(levels(groups))
fit <- lmFit(DEG, design)
contrast.matrix <- makeContrasts(v3T3Lena-v3T3,v3T40-v3T3,levels=levels(groups))
fit2 <- contrasts.fit(fit,contrast.matrix)
fit2 <- eBayes(fit2)
TT <- topTable(fit2,coef=2,number=nrow(DEG),adjust="BH")
TT <- TT[rowSums(is.na(TT))==0,]
TT$logP <- -log(TT$P.Value,10)
TT$Gene <- rownames(TT)
TT <- merge(TT,genegroups,by="Gene")
#make volcano plot with ggplot
drawplot <- function(x,y){
xran <- max(abs(x))
yran <- max(y)
ggplot(data=TT,aes(x,y,color=genegroup,text=TT$Gene)) +
labs(x="-2log Fold change",y="-10log P-value") +
scale_x_continuous(limits = c(-xran,xran)) +
scale_y_continuous(limits = c(0,yran)) +
geom_vline(xintercept=0,linetype=2) +
#geom_hline(yintercept=-log(0.05,10),linetype=3) +
#theme_minimal()+
theme(aspect.ratio=1, panel.background=element_rect(fill="white",colour="black"))+
geom_point(size=2,alpha=0.7)
ggplotly(hoverinfo = "text",text =TT$Gene,tooltip="all")
}
drawplot(TT$logFC,TT$logP)
install.packages("shiny")
library(shiny)
runApp('C:/Google Drive/R/2016-09-24 shiny test')
shiny::runApp()
runApp()
runApp()
?1
?a
runApp()
runApp()
runApp()
runApp()
runApp()
?a
runApp()
runApp()
shiny::runApp()
interactive()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
chr(1)
as.text(1)
as.character(1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?fileInput
runApp()
runApp()
?selectInput
runApp()
runApp()
cars
ggplot(cars)
library(ggplot2)
ggplot(cars)
qplot(cars)
ggplot(cars,aes(x=speed,y=dist))
cars
ggplot(cars,aes(x=speed,y=dist)) + geom_point()
runApp()
ggplot(cars,aes(x=speed,y=dist)) + geom_point()
ggplot(cars,aes(x=speed,y=dist)) + geom_point()
runApp()
runApp()
p <- ggplot(cars,aes(x=speed,y=dist)) + geom_point()
p
str(p)
?plt
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#Loading
library(readxl)
library(tidyverse)
library(plotly)
library(limma)
library(dplyr)
setwd("C:/Google Drive/R/2016-09-16 MLPA Lena")
genegroups <- data.frame(
Gene=     c("DR6",           "p21",          "OMI",         "Bcl-w",          "FLIP",          "Bcl-x",         "Noxa",    "Bcl-2",         "Bfl-1",         "FLIP2",         "Mcl-1",         "B2M", "Bad",      "Bax",          "Bok",          "Bak",          "Bim",     "Bid",     "Bcl-RAMBO",    "Bcl-G",        "Harakiri","Niap","CD178",         "CIAP1","CIAP2","XIAP","Survivin","Apollon","Livin","PI9",     "PUMA",   "PARN",     "AIF",     "Map1",    "GUSB",    "Nix",           "APAF1",   "GranzymeB","Perforin","NIP3",    "SMAC",         "Bmf",     "Bik",     "Boo",           "cIAP1","CD95"          ),
genegroup=c("death_receptor","proliferation","IAP_inhibitor","anti-apoptotic","death_receptor","anti-apoptotic","BH3_only","anti-apoptotic","anti-apoptotic","death_receptor","anti-apoptotic","other","BH3_only","pro-apoptotic","pro-apoptotic","pro-apoptotic","BH3_only","BH3_only","pro-apoptotic","pro-apoptotic","BH3_only","IAP", "death_receptor","IAP",  "IAP",  "IAP", "IAP",     "IAP",    "IAP",  "executor","BH3_only","executor","executor","executor","executor","anti-apoptotic","executor","T_cell",   "T_cell",  "BH3_only","IAP_inhibitor","BH3_only","BH3_only","anti-apoptotic","IAP",  "death_receptor")
)
#Read and edit DEG to a matrix and store the groups as factor
DEG <- data.frame(read_excel("MLPA.xlsx",col_names = F))
groups <- factor(unlist(DEG[2,-1]))
colnames(DEG) <- DEG[1,]
DEG <- DEG[c(-1,-2),]
rownms <- DEG[,1]
DEG <- DEG[,-1]
DEG <- sapply(DEG,as.numeric)
setwd("C:/Google Drive/R/2016-09-16 MLPA Lena")
setwd("D:/Google Drive/R/2016-09-16 MLPA Lena")
DEG <- data.frame(read_excel("MLPA.xlsx",col_names = F))
groups <- factor(unlist(DEG[2,-1]))
colnames(DEG) <- DEG[1,]
DEG <- DEG[c(-1,-2),]
rownms <- DEG[,1]
DEG <- DEG[,-1]
DEG <- sapply(DEG,as.numeric)
row.names(DEG) <- rownms
DEG <- log(DEG,base=2)
DEG[DEG==-Inf] <- NA
DEG <- DEG[rowSums(is.na(DEG))<ncol(DEG)/2,]
#create linear fit
#design  <- model.matrix(~0+factor(rep(c(1,2,3),5)))
design  <- model.matrix(~0+groups)
colnames(design) <- c(levels(groups))
fit <- lmFit(DEG, design)
contrast.matrix <- makeContrasts(v3T3Lena-v3T3,v3T40-v3T3,levels=levels(groups))
fit2 <- contrasts.fit(fit,contrast.matrix)
fit2 <- eBayes(fit2)
TT <- topTable(fit2,coef=2,number=nrow(DEG),adjust="BH")
TT <- TT[rowSums(is.na(TT))==0,]
TT$logP <- -log(TT$P.Value,10)
TT$Gene <- rownames(TT)
TT <- merge(TT,genegroups,by="Gene")
#make volcano plot with ggplot
drawplot <- function(x,y){
xran <- max(abs(x))
yran <- max(y)
ggplot(data=TT,aes(x,y,color=genegroup,text=TT$Gene)) +
labs(x="-2log Fold change",y="-10log P-value") +
scale_x_continuous(limits = c(-xran,xran)) +
scale_y_continuous(limits = c(0,yran)) +
geom_vline(xintercept=0,linetype=2) +
#geom_hline(yintercept=-log(0.05,10),linetype=3) +
#theme_minimal()+
theme(aspect.ratio=1, panel.background=element_rect(fill="white",colour="black"))+
geom_point(size=2,alpha=0.7)
ggplotly(hoverinfo = "text",tooltip="all")
}
drawplot(TT$logFC,TT$logP)
shiny::runApp('D:/Google Drive/R/2016-09-24 shiny test')
View(DEG)
View(contrast.matrix)
View(DEG)
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
DEG <- data
groups <- factor(unlist(DEG[2,-1]))
colnames(DEG) <- DEG[1,]
DEG <- DEG[c(-1,-2),]
rownms <- DEG[,1]
DEG <- DEG[,-1]
DEG <- sapply(DEG,as.numeric)
row.names(DEG) <- rownms
DEG <- log(DEG,base=2)
DEG[DEG==-Inf] <- NA
DEG <- DEG[rowSums(is.na(DEG))<ncol(DEG)/2,]
DEG <- data()
groups <- factor(unlist(DEG[2,-1]))
colnames(DEG) <- DEG[1,]
DEG <- DEG[c(-1,-2),]
rownms <- DEG[,1]
DEG <- DEG[,-1]
DEG <- sapply(DEG,as.numeric)
row.names(DEG) <- rownms
DEG <- log(DEG,base=2)
DEG[DEG==-Inf] <- NA
DEG <- DEG[rowSums(is.na(DEG))<ncol(DEG)/2,]
DEG <- data()
groups <- factor(unlist(DEG[2,-1]))
colnames(DEG) <- DEG[1,]
DEG <- DEG[c(-1,-2),]
rownms <- DEG[,1]
DEG <- DEG[,-1]
DEG <- sapply(DEG,as.numeric)
row.names(DEG) <- rownms
DEG <- log(DEG,base=2)
DEG[DEG==-Inf] <- NA
DEG <- DEG[rowSums(is.na(DEG))<ncol(DEG)/2,]
DEG
data()
DEG <- dat()
groups <- factor(unlist(DEG[2,-1]))
colnames(DEG) <- DEG[1,]
DEG <- DEG[c(-1,-2),]
rownms <- DEG[,1]
DEG <- DEG[,-1]
DEG <- sapply(DEG,as.numeric)
row.names(DEG) <- rownms
DEG <- log(DEG,base=2)
DEG[DEG==-Inf] <- NA
DEG <- DEG[rowSums(is.na(DEG))<ncol(DEG)/2,]
runApp('D:/Google Drive/R/2016-09-24 shiny test')
DEG <- dat()
groups <- factor(unlist(DEG[2,-1]))
colnames(DEG) <- DEG[1,]
DEG <- DEG[c(-1,-2),]
rownms <- DEG[,1]
DEG <- DEG[,-1]
DEG <- sapply(DEG,as.numeric)
row.names(DEG) <- rownms
DEG <- log(DEG,base=2)
DEG[DEG==-Inf] <- NA
DEG <- DEG[rowSums(is.na(DEG))<ncol(DEG)/2,]
dat <- reactive({
inFile <- input$fo
if (is.null(inFile))
return(NULL)
file.rename(inFile$datapath,paste(inFile$datapath, "xlsx", sep="."))
read_excel(paste(inFile$datapath, ".xlsx", sep=""),1)
})
DEG <- dat()
groups <- factor(unlist(DEG[2,-1]))
colnames(DEG) <- DEG[1,]
DEG <- DEG[c(-1,-2),]
rownms <- DEG[,1]
DEG <- DEG[,-1]
DEG <- sapply(DEG,as.numeric)
row.names(DEG) <- rownms
DEG <- log(DEG,base=2)
DEG[DEG==-Inf] <- NA
DEG <- DEG[rowSums(is.na(DEG))<ncol(DEG)/2,]
dat
dat()
runApp('D:/Google Drive/R/2016-09-24 shiny test')
DEG
runApp('D:/Google Drive/R/2016-09-24 shiny test')
#Read and edit DEG to a matrix and store the groups as factor
DEG <- data.frame(read_excel("MLPA.xlsx",col_names = F))
groups <- factor(unlist(DEG[2,-1]))
colnames(DEG) <- DEG[1,]
DEG <- DEG[c(-1,-2),]
rownms <- DEG[,1]
DEG <- DEG[,-1]
DEG <- sapply(DEG,as.numeric)
row.names(DEG) <- rownms
DEG <- log(DEG,base=2)
DEG[DEG==-Inf] <- NA
DEG <- DEG[rowSums(is.na(DEG))<ncol(DEG)/2,]
#create linear fit
#design  <- model.matrix(~0+factor(rep(c(1,2,3),5)))
design  <- model.matrix(~0+groups)
colnames(design) <- c(levels(groups))
fit <- lmFit(DEG, design)
contrast.matrix <- makeContrasts(v3T3Lena-v3T3,v3T40-v3T3,levels=levels(groups))
fit2 <- contrasts.fit(fit,contrast.matrix)
fit2 <- eBayes(fit2)
TT <- topTable(fit2,coef=2,number=nrow(DEG),adjust="BH")
TT <- TT[rowSums(is.na(TT))==0,]
TT$logP <- -log(TT$P.Value,10)
TT$Gene <- rownames(TT)
TT <- merge(TT,genegroups,by="Gene")
#make volcano plot with ggplot
drawplot <- function(x,y){
xran <- max(abs(x))
yran <- max(y)
ggplot(data=TT,aes(x,y,color=genegroup,text=TT$Gene)) +
labs(x="-2log Fold change",y="-10log P-value") +
scale_x_continuous(limits = c(-xran,xran)) +
scale_y_continuous(limits = c(0,yran)) +
geom_vline(xintercept=0,linetype=2) +
#geom_hline(yintercept=-log(0.05,10),linetype=3) +
#theme_minimal()+
theme(aspect.ratio=1, panel.background=element_rect(fill="white",colour="black"))+
geom_point(size=2,alpha=0.7)
ggplotly(hoverinfo = "text",tooltip="all")
}
drawplot(TT$logFC,TT$logP)
View(DEG)
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
ggplot(data=data.frame(a=c(1,4),b=c(6,8))),aes(x=a,y=b)+geom_point()
(ggplot(data=data.frame(a=c(1,4),b=c(6,8)),aes(x=a,y=b)+geom_point())
(ggplot(data=data.frame(a=c(1,4),b=c(6,8)),aes(x=a,y=b)+geom_point()))
data.frame(a=c(1,4),b=c(6,8))
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
DEG <- data.frame(read_excel("MLPA.xlsx",col_names = F))
groups <- factor(unlist(DEG[2,-1]))
colnames(DEG) <- DEG[1,]
DEG <- DEG[c(-1,-2),]
rownms <- DEG[,1]
rownames(DEG) <- rownms
c("1",2)  %>% as.numeric
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp('D:/Google Drive/R/2016-09-24 shiny test')
design  <- model.matrix(~0+groups)
colnames(design) <- c(levels(groups))
View(design)
fit <- lmFit(DEG, design)
contrast.matrix <- makeContrasts(v3T3Lena-v3T3,v3T40-v3T3,levels=levels(groups))
fit2 <- contrasts.fit(fit,contrast.matrix)
fit2 <- eBayes(fit2)
TT <- topTable(fit2,coef=2,number=nrow(DEG),adjust="BH")
TT <- TT[rowSums(is.na(TT))==0,]
TT$logP <- -log(TT$P.Value,10)
TT$Gene <- rownames(TT)
TT <- merge(TT,genegroups,by="Gene")
runApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp(display.mode="showcase")
setwd("D:/Google Drive/R/2016-09-24 shiny test")
runApp(display.mode="showcase")
runApp(display.mode="showcase")
DEG
runApp()
runApp()
runApp()
cascas
casc == NULL
cascsa=NULL
runApp()
?log10
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='martijnvanattekum',
token='DA6728CEC9E5184DA37806DAF832DAF4',
secret='<SECRET>')
rsconnect::setAccountInfo(name='martijnvanattekum', token='DA6728CEC9E5184DA37806DAF832DAF4', secret='DcZ+4bI7lq4eILn9gMdAzEQGZ+hhwg122jGrSwBZ')
runApp()
library(nlme)
install.packages("nlme")
library(rsconnect)
rsconnect::deployApp('D:/Google Drive/R/2016-09-24 shiny test')
runApp()
cars
runApp()
runApp()
runApp()
runApp()
runApp()
levels()
runApp()
?"<<-"
runApp()
runApp()
runApp()
make.names("3T3")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
genegroups <- data.frame(
Gene=     c("DR6",           "p21",  "OMI",          "BCL-W",         "FLIP",          "BCL-X",         "NOXA",    "BCL-2",         "BFL-1",         "FLIP2",         "MCL-1",         "B2M",  "BAD",     "BAX",          "BOK",          "BAK",          "BIM",     "BID",     "BCL-RAMBO",    "BCL-G",        "HARAKIRI","NIAP","FASL",          "CIAP1_probe1","CIAP2","XIAP","SURVIVIN","APOLLON","LIVIN","SERPINB9","PUMA",    "PARN",    "AIF",     "MAP1",    "GUSB",    "NIX",           "APAF1",   "GRZB", "PERFORIN","NIP3",    "SMAC",         "BMF",     "BIK",     "BOO",           "CIAP1_probe2","FAS"          ),
genegroup=c("death_receptor","other","IAP_inhibitor","anti-apoptotic","death_receptor","anti-apoptotic","BH3_only","anti-apoptotic","anti-apoptotic","death_receptor","anti-apoptotic","other","BH3_only","pro-apoptotic","pro-apoptotic","pro-apoptotic","BH3_only","BH3_only","pro-apoptotic","pro-apoptotic","BH3_only","IAP", "death_receptor","IAP",         "IAP",  "IAP", "IAP",     "IAP",    "IAP",  "T_cell",  "BH3_only","executor","executor","executor","executor","anti-apoptotic","executor","T_cell","T_cell", "BH3_only","IAP_inhibitor","BH3_only","BH3_only","anti-apoptotic","IAP",         "death_receptor")
,stringsAsFactors = F)
View(genegroups)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- list(b=list(q=3))
a
a$b$q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp("MyApp", display.mode = "showcase")
runApp(display.mode = "showcase")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(haven)
install.packages("haven")
library(haven)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(haven)
runApp()
runApp()
